name: TerraForm

on:
  workflow_call:
    inputs:
      env:
        required: true
        type: string
      appName:
        required: true
        type: string
      tfVersion:
        required: false
        type: string
        default: '1.4.2'
    secrets:
      terraformToken:
        required: true

env:
  TF_WORKSPACE: '${{ inputs.appName }}-${{ inputs.env }}'
  TF_IN_AUTOMATION: 'true'

jobs:
  terraform_plan:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.tfVersion }}
          cli_config_credentials_token: ${{ secrets.terraformToken }}
      
      - name: Checkout
        uses: actions/checkout@v3

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        working-directory: ${{ inputs.env }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ inputs.env }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ inputs.env }}

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out=tfplan
        continue-on-error: true
        working-directory: ${{ inputs.env }}

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1