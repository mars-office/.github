name: TerraForm

on:
  workflow_call:
    inputs:
      env:
        required: true
        type: string
      tfVersion:
        required: false
        type: string
        default: '1.4.6'
      tfScanDisabled:
        required: false
        type: boolean
        default: false

env:
  TF_IN_AUTOMATION: 'true'

jobs:
  terraform_scan:
    permissions:
      security-events: write
      actions: read
      contents: read
      packages: write
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/iac@master
        continue-on-error: true
        if: ${{ inputs.tfScanDisabled == false }}
        id: tf_code_scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          file: ${{ inputs.env }}
          sarif: true
          args: --severity-threshold=high

      - name: Upload result to GitHub Code Scanning
        if: ${{ inputs.tfScanDisabled == false }}
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

      - name: Fail job if scan failed
        if: ${{ inputs.tfScanDisabled == false && steps.tf_code_scan.outcome == 'failure' }}
        run: exit 1

  terraform_plan:
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    permissions:
      security-events: write
      actions: read
      contents: read
      packages: write
      id-token: write
      pull-requests: write
    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.tfVersion }}
          cli_config_credentials_token: ${{ secrets.TERRAFORM_TEAM_TOKEN }}
      
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure Terraform plugin cache
        run: |
          echo 'plugin_cache_dir = "$HOME/.terraform.d/plugin-cache"' >> ~/.terraformrc
          mkdir -p ~/.terraform.d/plugin-cache

      - name: Cache Terraform
        uses: actions/cache@v3
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles(format('{0}/.terraform.lock.hcl', inputs.env)) }}
          restore-keys: ${{ runner.os }}-terraform-

      - name: Substitute Secrets
        uses: Lambdaspire/action-substitute-secrets-in-file@main
        with:
          file: ${{ inputs.env }}/secrets.tfvars
          tokenPattern: ${TOKEN}
          secretsJson: ${{ toJSON(secrets) }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ inputs.env }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ inputs.env }}

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -var-file="secrets.tfvars" -out=./tfplan
        continue-on-error: true
        working-directory: ${{ inputs.env }}

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.env }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Convert plan to JSON
        if: ${{ inputs.tfScanDisabled == false }}
        working-directory: ${{ inputs.env }}
        run: terraform show -json tfplan > tf-plan.json

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/iac@master
        continue-on-error: true
        if: ${{ inputs.tfScanDisabled == false }}
        id: tf_scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          file: ./${{ inputs.env }}/tf-plan.json
          sarif: true
          args: --severity-threshold=high --scan=planned-values -f

      - name: Upload result to GitHub Code Scanning
        if: ${{ inputs.tfScanDisabled == false }}
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

      - name: Fail job if scan failed
        if: ${{ inputs.tfScanDisabled == false && steps.tf_scan.outcome == 'failure' }}
        run: exit 1
      
      - name: Upload tfplan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: ${{ inputs.env }}/tfplan
          

  terraform_apply:
    permissions:
      security-events: write
      actions: read
      contents: read
      packages: write
      id-token: write
    runs-on: ubuntu-latest
    needs: [terraform_plan, terraform_scan]
    if: github.event_name != 'pull_request'
    environment: approval
    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.tfVersion }}
          cli_config_credentials_token: ${{ secrets.TERRAFORM_TEAM_TOKEN }}
      
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure Terraform plugin cache
        run: |
          echo 'plugin_cache_dir = "$HOME/.terraform.d/plugin-cache"' >> ~/.terraformrc
          mkdir -p ~/.terraform.d/plugin-cache
          
      - name: Cache Terraform
        uses: actions/cache@v3
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles(format('{0}/.terraform.lock.hcl', inputs.env)) }}
          restore-keys: ${{ runner.os }}-terraform-

      - name: Download tfplan
        uses: actions/download-artifact@v3
        with:
          name: tfplan
          path: ${{ inputs.env }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ inputs.env }}

      - name: Terraform Apply
        id: apply
        run: terraform apply -input=false -no-color -auto-approve tfplan
        working-directory: ${{ inputs.env }}
      
