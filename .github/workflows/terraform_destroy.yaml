name: TerraForm destroy

on:
  workflow_call:
    inputs:
      env:
        required: true
        type: string
      tfVersion:
        required: false
        type: string
        default: '1.4.6'

env:
  TF_IN_AUTOMATION: 'true'

jobs:
  terraform_plan_destroy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.tfVersion }}
          cli_config_credentials_token: ${{ secrets.TERRAFORM_TEAM_TOKEN }}
      
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure Terraform plugin cache
        run: |
          echo 'plugin_cache_dir = "$HOME/.terraform.d/plugin-cache"' >> ~/.terraformrc
          mkdir -p ~/.terraform.d/plugin-cache

      - name: Cache Terraform
        uses: actions/cache@v3
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles(format('{0}/.terraform.lock.hcl', inputs.env)) }}
          restore-keys: ${{ runner.os }}-terraform-

      - name: Substitute Secrets
        uses: Lambdaspire/action-substitute-secrets-in-file@main
        with:
          file: ${{ inputs.env }}/secrets.tfvars
          tokenPattern: ${TOKEN}
          secretsJson: ${{ toJSON(secrets) }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ inputs.env }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ inputs.env }}

      - name: Terraform Plan
        id: plan
        run: terraform plan -destroy -no-color -input=false -var-file="secrets.tfvars" -out=tfplan
        continue-on-error: true
        working-directory: ${{ inputs.env }}

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      
      - name: Upload tfplan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: ${{ inputs.env }}/tfplan
          

  terraform_apply_destroy:
    runs-on: ubuntu-latest
    needs: [terraform_plan_destroy]
    environment: approval
    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.tfVersion }}
          cli_config_credentials_token: ${{ secrets.TERRAFORM_TEAM_TOKEN }}
      
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure Terraform plugin cache
        run: |
          echo 'plugin_cache_dir = "$HOME/.terraform.d/plugin-cache"' >> ~/.terraformrc
          mkdir -p ~/.terraform.d/plugin-cache
          
      - name: Cache Terraform
        uses: actions/cache@v3
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles(format('{0}/.terraform.lock.hcl', inputs.env)) }}
          restore-keys: ${{ runner.os }}-terraform-

      - name: Download tfplan
        uses: actions/download-artifact@v3
        with:
          name: tfplan
          path: ${{ inputs.env }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ inputs.env }}

      - name: Terraform Destroy
        id: apply
        run: terraform apply -destroy -input=false -no-color -auto-approve tfplan
        working-directory: ${{ inputs.env }}
      
